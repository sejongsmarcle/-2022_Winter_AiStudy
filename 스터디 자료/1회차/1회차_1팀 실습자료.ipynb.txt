{
 "cells": [
  {
   "attachments": {
    "image.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "id": "8f831844",
   "metadata": {},
   "source": [
    "## 아래는 코로나 19 발생 후 5개월 간 온라인에서 '코로나', '마스크' 등 코로나 관련된 키워드로 검색된 횟수를 나타낸 표이다. 아래 표를 토대로 월에 따른 정보량을 예측하려고 한다.\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "### 이 표를 보고 두 사람이 선형회귀 예측을 진행했다.\n",
    "\n",
    "### 스클: y = -400x + 7000\n",
    "### 마클: y = -420x + 6000\n",
    "\n",
    "### 두 사람 중 오차가 적은 방정식을 제시한 사람을 찾고, 최소제곱법을 사용해 최적의 선형회귀 방정식을 제시해 보자.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b89b2698",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b9cc151",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 스클과 마클의 오차 파악하기\n",
    "scle = [-400, 7000]\n",
    "macle = [-420, 6000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f93f88b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 데이터 리스트 선언 data = [[x,y], ...]\n",
    "data = [[3,5580],[5,2984],[7,2446],[9,2906]]\n",
    "# x와 y 리스트 선언\n",
    "x = [i[0] for i in data]\n",
    "y = [i[1] for i in data]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "12825292",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 일차 방정식 y = ax + b 구현\n",
    "def p_scle(x):\n",
    "    return scle[0]*x + scle[1]\n",
    "def p_macle(x):\n",
    "    return macle[0]*x + macle[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34ac8a67",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 평균 제곱 오차 계산 함수 정의\n",
    "def mse(y,y_hat):\n",
    "    return (((y-y_hat) ** 2).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46b1666b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 최종값을 구하는 mse_val() 함수 정의\n",
    "def mse_val(y,predict_result):\n",
    "    return mse(np.array(y),np.array(predict_result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "da9f79e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 예측 값이 들어갈 빈 리스트\n",
    "predict_result_s = []\n",
    "predict_result_ma = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a4c19a88",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "월=3, 정보량=5580, 예측 정보량=5800\n",
      "월=5, 정보량=2984, 예측 정보량=5000\n",
      "월=7, 정보량=2446, 예측 정보량=4200\n",
      "월=9, 정보량=2906, 예측 정보량=3400\n"
     ]
    }
   ],
   "source": [
    "# 모든 x의 값을 한 번씩 대입 => predict_result 리스트 완성\n",
    "for i in range(len(x)):\n",
    "    predict_result_s.append(p_scle(x[i]))\n",
    "    print(\"월=%.f, 정보량=%.f, 예측 정보량=%.f\" %(x[i],y[i],p_scle(x[i])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b9cc28ef",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "월=3, 정보량=5580, 예측 정보량=4740\n",
      "월=5, 정보량=2984, 예측 정보량=3900\n",
      "월=7, 정보량=2446, 예측 정보량=3060\n",
      "월=9, 정보량=2906, 예측 정보량=2220\n"
     ]
    }
   ],
   "source": [
    "# 모든 x의 값을 한 번씩 대입 => predict_result 리스트 완성\n",
    "for i in range(len(x)):\n",
    "    predict_result_ma.append(p_macle(x[i]))    \n",
    "    print(\"월=%.f, 정보량=%.f, 예측 정보량=%.f\" %(x[i],y[i],p_macle(x[i])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12dca446",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5800, 5000, 4200, 3400]\n",
      "[4740, 3900, 3060, 2220]\n"
     ]
    }
   ],
   "source": [
    "print(predict_result_s)\n",
    "print(predict_result_ma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "aab1ec34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse_scle 최종값: 1858302.0\n",
      "mse_macle 최종값: 598062.0\n"
     ]
    }
   ],
   "source": [
    "# 최종 MSE 출력\n",
    "print(\"mse_scle 최종값: \"+ str(mse_val(y,predict_result_s,)))\n",
    "print(\"mse_macle 최종값: \"+ str(mse_val(y,predict_result_ma)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f9b4d9",
   "metadata": {},
   "source": [
    "# 스클보다 마클의 오차가 적으므로 더 정확한 예측을 했다고 할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e7d3b64",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 최소제곱법 사용해 최적화된 선형회귀 방정식 세우기\n",
    "# 최소 제곱근 공식으로 기울기 a와 y 절편 b의 값 구하기\n",
    "# 모든 원소의 평균 구하는 함수 mean()\n",
    "mx = np.mean(x)\n",
    "my = np.mean(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b4909231",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 최소 제곱근 기울기 a 구하는 공식 중 분모 구하기\n",
    "# 본모 = (x의 각 원소-x의 평균)^2 의 합\n",
    "divisor = sum([(mx - i)**2 for i in x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0370d9ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 최소 제곱근 기울기 a 구하는 공식 중 분자 구하기\n",
    "# 본자 = (x 편차 * y 편차)의 합\n",
    "\n",
    "# 분자 구하는 함수 지정\n",
    "def top(x,mx,y,my):\n",
    "    d=0;\n",
    "    for i in range(len(x)):\n",
    "        d += (x[i] - mx)*(y[i] - my)\n",
    "    return  d\n",
    "dividend = top(x,mx,y,my)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "377cba3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "분모 =  20.0\n",
      "분자 =  -8560.0\n"
     ]
    }
   ],
   "source": [
    "# 결과 값 출력\n",
    "print(\"분모 = \",divisor)\n",
    "print(\"분자 = \",dividend)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "206256d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 기울기 구하기\n",
    "a = dividend / divisor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e9a4182d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y 절편 b 구하기\n",
    "b = my - (mx*a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a2296375",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "기울기 a = -428.0\n",
      "y 절편 b = 6047.0\n"
     ]
    }
   ],
   "source": [
    "# 출력으로 확인\n",
    "print(\"기울기 a =\", a)\n",
    "print(\"y 절편 b =\", b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29aebadd",
   "metadata": {},
   "source": [
    "## 최소 제곱법을 사용해 \n",
    "# y = -428x + 6047 \n",
    "## 이라는 선형회귀 방정식을 도출할 수 있다. 추가적으로 오차를 아래와 같이 구할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "29d39df5",
   "metadata": {},
   "outputs": [],
   "source": [
    "opti = [-428,6047]\n",
    "\n",
    "def p_opti(x):\n",
    "    return opti[0]*x + opti[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "17902b60",
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_result = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dec1164a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "월=3, 정보량=5580, 예측 정보량=4763\n",
      "월=5, 정보량=2984, 예측 정보량=3907\n",
      "월=7, 정보량=2446, 예측 정보량=3051\n",
      "월=9, 정보량=2906, 예측 정보량=2195\n"
     ]
    }
   ],
   "source": [
    "# 모든 x의 값을 한 번씩 대입 => predict_result 리스트 완성\n",
    "for i in range(len(x)):\n",
    "    predict_result.append(p_opti(x[i]))    \n",
    "    print(\"월=%.f, 정보량=%.f, 예측 정보량=%.f\" %(x[i],y[i],p_opti(x[i])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d7c52a08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse 최종값: 597741.0\n"
     ]
    }
   ],
   "source": [
    "# 최종 MSE 출력\n",
    "print(\"mse 최종값: \"+ str(mse_val(predict_result,y)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26aa2ce1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
